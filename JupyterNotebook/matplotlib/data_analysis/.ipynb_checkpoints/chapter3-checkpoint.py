{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pygame'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-671b35b41eba>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mpygame\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pygame'"
     ]
    }
   ],
   "source": [
    "import pygame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "###############################################################################\n",
    "#######################            正文代码             #######################\n",
    "###############################################################################\n",
    "\n",
    "# 代码 3-1\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "## %matplotlib inline表示在行中显示图片，在命令行运行报错\n",
    "data = np.arange(0,1.1,0.01)\n",
    "plt.title('lines') ## 添加标题\n",
    "plt.xlabel('x')## 添加x轴的名称\n",
    "plt.ylabel('y')## 添加y轴的名称\n",
    "plt.xlim((0,1))## 确定x轴范围\n",
    "plt.ylim((0,1))## 确定y轴范围\n",
    "plt.xticks([0,0.2,0.4,0.6,0.8,1])## 规定x轴刻度\n",
    "plt.yticks([0,0.2,0.4,0.6,0.8,1])## 确定y轴刻度\n",
    "plt.plot(data,data**2)## 添加y=x^2曲线\n",
    "plt.plot(data,data**4)## 添加y=x^4曲线\n",
    "plt.legend(['y=x^2','y=x^4'])\n",
    "plt.savefig('../tmp/y=x^2.png')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
